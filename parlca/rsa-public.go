/*
© 2022–present Harald Rudell <harald.rudell@gmail.com> (https://haraldrudell.github.io/haraldrudell/)
ISC License
*/

package parlca

import (
	"crypto/rsa"
	"crypto/x509"
	"encoding/pem"
	"slices"

	"github.com/haraldrudell/parl"
)

// RsaPublicKey is container for public key in efficient binary form
//   - generated by [RsaPrivateKey.PublicKey] or [parl.PrivateKey.PublicKey]
type RsaPublicKey struct {
	rsa.PublicKey
}

// RsaPublicKey is [parl.PublicKey]
var _ parl.PublicKey = &RsaPublicKey{}

// Algo returns [x509.RSA] “RSA”
func (key *RsaPublicKey) Algo() (algo x509.PublicKeyAlgorithm) { return x509.RSA }

// DER returns public key as PKCS#1 ASN.1 DER
func (key *RsaPublicKey) DER() (publicKeyDer parl.PublicKeyDer, err error) {
	publicKeyDer = x509.MarshalPKCS1PublicKey(&key.PublicKey)
	return
}

// DERe returns public key as PKCS#1 ASN.1 DER panic on error
func (key *RsaPublicKey) DERe() (publicKeyDer parl.PublicKeyDer) {
	var err error
	if publicKeyDer, err = key.DER(); err != nil {
		panic(err)
	}
	return
}

// PEM returns public key in text form “-----RSA PUBLIC KEY …”
func (key *RsaPublicKey) PEM() (pemBytes parl.PemBytes, err error) {
	var block = pem.Block{
		Type: pemRSAPublicKeyType,
	}
	if block.Bytes, err = key.DER(); err != nil {
		return
	}
	// two allocations here
	pemBytes = pem.EncodeToMemory(&block)
	pemBytes = slices.Insert(pemBytes, 0, []byte(PemText())...)
	return
}

// PEMe returns public key in text form “-----RSA PUBLIC KEY …” panic on error
func (key *RsaPublicKey) PEMe() (pemBytes parl.PemBytes) {
	var err error
	if pemBytes, err = key.PEM(); err != nil {
		panic(err)
	}
	return
}

const (
	pemRSAPublicKeyType = "RSA PUBLIC KEY"
)
